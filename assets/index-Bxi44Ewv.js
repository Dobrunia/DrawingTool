var v=Object.defineProperty;var p=(a,t,e)=>t in a?v(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var n=(a,t,e)=>p(a,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(o){if(o.ep)return;o.ep=!0;const i=e(o);fetch(o.href,i)}})();const g='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.6667 13.6667L18 10.3333L14.6667 7M18 10.3333H8.83333C7.94928 10.3333 7.10143 10.6845 6.47631 11.3096C5.85119 11.9348 5.5 12.7826 5.5 13.6667C5.5 14.5507 5.85119 15.3986 6.47631 16.0237C7.10143 16.6488 7.94928 17 8.83333 17H9.66667"/></svg>',f='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.33333 13.6667L6 10.3333L9.33333 7M6 10.3333H15.1667C16.0507 10.3333 16.8986 10.6845 17.5237 11.3096C18.1488 11.9348 18.5 12.7826 18.5 13.6667C18.5 14.5507 18.1488 15.3986 17.5237 16.0237C16.8986 16.6488 16.0507 17 15.1667 17H14.3333"/></svg>';class m{constructor(){n(this,"canvas");n(this,"ctx");n(this,"undoButton");n(this,"redoButton");n(this,"saveButton");n(this,"sizeInput");n(this,"toolButtons");n(this,"colorButtons");n(this,"colorSelector");n(this,"cursor");n(this,"undoStack",[]);n(this,"redoStack",[]);n(this,"drawing",!1);n(this,"currentTool","brush");n(this,"color","#FFFFFF");n(this,"size",4);this.canvas=document.getElementById("drawingCanvas"),this.ctx=this.canvas.getContext("2d"),this.undoButton=document.getElementById("undo"),this.redoButton=document.getElementById("redo"),this.saveButton=document.getElementById("save"),this.sizeInput=document.querySelector(".brush-size"),this.toolButtons=document.querySelectorAll(".tool-btn"),this.colorButtons=document.querySelectorAll(".color-btn"),this.colorSelector=document.querySelector("#color-selector"),this.cursor=this.createCursor(),this.init()}init(){this.setupUI(),this.setupCanvas(),this.attachEventListeners()}setupUI(){this.undoButton.innerHTML=f,this.redoButton.innerHTML=g}setupCanvas(){const t=new Image;t.src="1.png",t.onload=()=>{this.canvas.width=t.width,this.canvas.height=t.height,this.ctx.drawImage(t,0,0,t.width,t.height),this.saveState()},this.canvas.style.cursor="none"}createCursor(){const t=document.createElement("div");return t.style.position="absolute",t.style.borderRadius="50%",t.style.pointerEvents="none",t.style.zIndex="1000",t.style.border="2px solid rgba(255, 255, 255, 0.5)",t.style.display="none",document.body.appendChild(t),t}attachEventListeners(){this.canvas.addEventListener("mouseenter",()=>{this.cursor.style.display="block"}),this.canvas.addEventListener("mouseleave",()=>{this.cursor.style.display="none"}),this.canvas.addEventListener("mousemove",t=>this.updateCursor(t)),this.sizeInput.addEventListener("input",()=>this.updateBrushSize()),this.canvas.addEventListener("mousedown",t=>this.startDrawing(t)),this.canvas.addEventListener("mouseup",()=>this.stopDrawing()),this.canvas.addEventListener("mousemove",t=>this.draw(t)),this.canvas.addEventListener("mouseleave",()=>this.stopDrawing()),this.toolButtons.forEach(t=>{t.addEventListener("click",()=>this.selectTool(t))}),this.colorButtons.forEach(t=>{t.addEventListener("click",()=>this.selectColor(t))}),this.undoButton.addEventListener("click",()=>this.undo()),this.redoButton.addEventListener("click",()=>this.redo()),this.saveButton.addEventListener("click",()=>this.saveCanvas())}updateCursor(t){const e=t.clientX-this.size/2,s=t.clientY-this.size/2;this.cursor.style.left=`${e}px`,this.cursor.style.top=`${s}px`,this.cursor.style.width=`${this.size}px`,this.cursor.style.height=`${this.size}px`}updateBrushSize(){this.size=Number(this.sizeInput.value)}startDrawing(t){this.drawing=!0;const e=t.clientX-this.canvas.offsetLeft,s=t.clientY-this.canvas.offsetTop;this.ctx.beginPath(),this.ctx.moveTo(e,s)}stopDrawing(){this.drawing&&(this.drawing=!1,this.ctx.closePath(),this.saveState())}draw(t){if(!this.drawing)return;const e=t.clientX-this.canvas.offsetLeft,s=t.clientY-this.canvas.offsetTop;this.ctx.lineWidth=this.size,this.ctx.lineCap="round",this.currentTool==="brush"?(this.ctx.strokeStyle=this.color,this.ctx.lineTo(e,s),this.ctx.stroke(),this.ctx.moveTo(e,s)):this.currentTool==="blur"&&this.applyBlur(e,s)}applyBlur(t,e){const s=Math.floor(this.size/2),o=s*2,i=this.ctx.getImageData(t-s,e-s,o,o);this.applyGaussianBlur(i),this.ctx.putImageData(i,t-s,e-s)}applyGaussianBlur(t){const e=t.data,s=t.width,o=t.height;for(let i=1;i<o-1;i++)for(let r=1;r<s-1;r++){const c=(i*s+r)*4,l=this.getNeighborPixels(e,s,o,r,i),h=this.averageColor(l);e[c]=h[0],e[c+1]=h[1],e[c+2]=h[2]}}getNeighborPixels(t,e,s,o,i){const r=[];for(let c=-1;c<=1;c++)for(let l=-1;l<=1;l++){const h=o+l,d=i+c;if(h>=0&&h<e&&d>=0&&d<s){const u=(d*e+h)*4;r.push([t[u],t[u+1],t[u+2]])}}return r}averageColor(t){const e=[0,0,0];t.forEach(o=>{e[0]+=o[0],e[1]+=o[1],e[2]+=o[2]});const s=t.length;return[e[0]/s,e[1]/s,e[2]/s]}selectTool(t){var e;this.toolButtons.forEach(s=>s.classList.remove("active")),t.classList.add("active"),this.currentTool=((e=t.textContent)==null?void 0:e.toLowerCase())||"brush",this.currentTool==="blur"?this.colorSelector.style.display="none":this.colorSelector.style.display="flex"}selectColor(t){this.colorButtons.forEach(e=>e.classList.remove("active")),t.classList.add("active"),this.color=window.getComputedStyle(t).backgroundColor}saveState(){this.redoStack=[],this.undoStack.push(this.canvas.toDataURL())}undo(){if(this.undoStack.length>0){this.redoStack.push(this.undoStack.pop());const t=this.undoStack[this.undoStack.length-1]||"1.png";this.loadCanvasFromUrl(t)}}redo(){if(this.redoStack.length>0){const t=this.redoStack.pop();this.undoStack.push(t),this.loadCanvasFromUrl(t)}}loadCanvasFromUrl(t){const e=new Image;e.src=t,e.onload=()=>{this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.drawImage(e,0,0)}}saveCanvas(){const t=document.createElement("a");t.download="canvas-image.png",t.href=this.canvas.toDataURL(),t.click()}}window.onload=()=>{new m};
